
# coding: utf-8

## EdQu - Arbetsprov för innehållsutvecklare

# Vi på EdQu vill att de test som administreras via vårt system ska vara så smidiga som möjligt för både lärare och elever. För läraren betyder det bland annat att de inte ska behöva skriva och rätta egna frågor. Därför bygger vi upp en frågedatabas med färdiga frågor som kan rättas automatiskt, och som följer läroplanen. För att få till så mycket variation som möjligt från denna databas är de flesta frågorna definierade som mallar.
# 
# Din uppgift är att skriva några sådana frågemallar för Geometri och Bråktal för mellanstadiet (se exempelvis [matteboken](http://www.matteboken.se) för inspiration). Eftersom vår frågedatabas kommer bli stor är det viktigt att din kod är så tydlig som möjligt, samtidigt som mallen ska kunna generera så många frågor som möjligt utan att försämra frågans eller rättningens kvalitet.
# 
# En enkel exempelfråga följer nedan vars mönster du gärna får följa. Du kan anta att när frågan genereras så kallas `generate_seed`, och det returnerade objektet används sedan för att rendera frågans markdown och utvärdera svaret. Använd dubbla hakparenteser (`[[]]`) i din frågetext för att indikera var värden från `seed`-objektet ska placeras i frågetexten. Använd enkla hakparenteser för att indikera namngivna inmatningsfält (där eleven sedan ska skriva in sitt svar).
# Värdena i inmatningsfälten samlas sedan och skickas till `evaluate` (tillsammans med `seed`-objektet) som ska poängsätta svaret.
# 
# Frågetexten har stöd för markdown med LaTeX-stöd (inom $$-markörer) för att formattera formler och uttryck. Påvisa gärna också att din fråga fungerar som den ska i kod.

## Exempel

# ##Min grymma fråga
# 
# Skriv ett tal som är högre än [[seed_x]]
# 
# Vad är svaret? [input_x]

# In[1]:

import random

class Question(object):
    def generate_seed(self):
        """Returns a random generated seed for the question
        
        The seed can be either a dict, list/tuple or builtin value or
        a combination of them
        
        Allows a single question to be generated with slight variable
        variance so students don't get the exact same question.
        """
        return {"seed_x": random.random()}  # this is an example
    
    def evaluate(self, seed, inputs):
        """Evaluate if input from a student is correct
        Arguments:
            seed - is an object generated by `generate_seed()` above
            inputs - a dictionary mapping input names from your question text
                     to a value that the student has written

        Returns:
            How many of the inputs fields were correctly filled in
        """
        return inputs["input_x"] > seed["seed_x"]



# In[3]:




## Egna frågor

# Skriv din fråge-markdown här.

# In[ ]:

import random

class Question(object):
    
    sides = {}
    
    def generate_seed(self):
        """Returns a random generated seed for the questions"""
        self.sides = {"side1": random.randrange(1, 10), "side2": random.randrange(1, 10), "side3": random.randrange(1, 10)}  # this is an example
    
    def welcome(self):
        print("Välkommen till geometrins värld!")
        print("Vill du börja med frågesporten?")
        begin = input("(y/n): ")
        if begin == "y":
             self.rectangle()
        elif begin == "n":
            return "Hej då!"
        
        while begin != "y" or begin != "n" or type(begin) != "str":
            print("Var snäll och välj endast y eller n!")
            begin = input("(y/n): ")
            if begin == "y":
                self.rectangle()
            elif begin == "n":
                return "Hoppas vi ses en annan gång. Hej då!"

            
    
    def rectangle(self):   
       
        print("\nNeda kan du välja frågekategori")
        print("A) Omkrets")
        print("B) area")
        print("C) Volym")
        print("D) Blandat")
        choice = input("Du väljer? ")
        if choice == "A":
            alt = 0
        elif choice == "B":
            alt = 1
        elif choice == "C":
            alt = 2
        elif choice == "D":
            pass # Alternativ D fångas upp lite längre ner inom For-loopen
        else:
            print("Ogiltigt svar. Försök igen!")
            self.rectangle()
            
        # variabel för rättning
        correct = 0
        
        #Frågesporten består av 10 frågor
        for numQ in range(1, 11):
            # variablerna slumpas mellan 1 till 9
            self.generate_seed()
            
            circuit = self.sides["side1"]*2 + self.sides["side2"]*2
            area = self.sides["side1"] * self.sides["side2"]
            cubic = self.sides["side1"] * self.sides["side2"]* self.sides["side3"]
            
            #Questons & answers
            QAs = [
            ("Vad är omkretsen på rektangeln om sidorna är [[%d]] cm respektive [[%d]] cm" % 
            (self.sides["side1"], self.sides["side2"]), circuit ), 
            ("Vad är arean på rektangeln om sidorna är [[%d]] cm respektive [[%d]] cm^2" % 
            (self.sides["side1"], self.sides["side2"]), area ),
            ("Vad är volymen på rektangeln om sidorna är [[%d]] cm, [[%d]] cm och [[%d]] cm^3" % 
            (self.sides["side1"], self.sides["side2"], self.sides["side3"]), cubic )
            ]
            if choice == "D":
                alt = random.randrange(0, len(QAs))
                   
            print("Fråga " + str(numQ) + ":",QAs[alt][0])
            answer = input("Vad är svaret? ")  
            if answer == str(QAs[alt][1]):
                print("Rätt.")
                correct += 1
            else:
                print("Fel, Svaret är " + str(QAs[alt][1]) + ".")
        
        print("\nDu fick %d frågor av mig. Av dessa fick du %d rätt och %d fel." % (numQ, correct, numQ-correct))
        if correct > 6:
            print("Bra jobbat!")
        elif  6 >= correct and correct >= 4:
            print("Du behöver mer övning.")
        else:
            print("Var snäll och be din lärare om hjälp med frågorna!")
        print("Vill du göra om frågesporten?")
        answer = input("(y/n): ")
        if answer == "y":
            self.rectangle()
        elif answer == "n":
            return "Hoppas det var lärorikt. Hej då :)"
        else:
            while answer != "y" or answer != "n" or type(answer) != "str":
                print("Var snäll och välj endast y eller n!")
                answer = input("(y/n): ")
                if answer == "y":
                    self.rectangle()
                elif answer == "n":
                    return "Hoppas att det var lärorikt. Hej då :)"

q = Question()
q.welcome()


# In[ ]:



